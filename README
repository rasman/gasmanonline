Currently, this is a quick and dirty port of the code from full_code/GasManQt 
with modification so that it can run on an Ubuntu Linux computer. Of note libxml2 
and libxslt libraries were installed and the application was run through the Qt 
program. Shoud this be run on your machine, you may need to remove the .pro.user 
files which appear to be autogenerated as it may corrupt the pro files required to 
exceute the program.

The rest of the README is left as is



Release Notes
-------------

1) This application requires Qt 4.3.2 or greater to build correctly.

2) You need to build and install the component plugins before using
   Designer to edit a form that uses them. These components are:
   gasanibutton, gasgauge, gasgraph, and gasmchn.

3) This application requires libxml2 and libxslt to build. These are standard
   on Mac OSX, but will need to be built for Windows. At the time 
   this was written, libxml2 2.6.30 and libxslt 1.1.22 were used. Refer 
   to the provided documentation below for building these libraries.

4) The fallback gas.xsl and gasman.ini files are located in the rsc/ 
   directory. Edit those two if you want to change the default behavior.
   The gas.xsl and gasman.ini files located in the current directory on 
   Windows or the GasMan.app/MacOS/Resources/ directory on Mac OS X are
   the working copies and are not checked in.

Macintosh Notes
---------------

1) The project file contains support for Mac OSX Universal
   Binaries. This requires Qt to be built with Universal Binary support
   as well. This is the default for the prebuilt Mac packages. See the
   installation instructions if you build Qt yourself.

2) Please read the "Deploying an Application on Qt/Mac" article for good
   information on packaging Mac applications. This is contained in the
   Assistant documentation, and online at
   http://doc.trolltech.com/4.3/deployment-mac.html.

   The mac/qtdeploy.sh shell script is included as a convenience in
   deploying on the Mac. It copies the required Qt frameworks and
   other files into the application bundle, prepares the bundle for
   deployment, and packages it in a *.dmg disk image.

   This deployment script does not work with XCode. It requires the
   macx-g++ makespec:

   qmake -spec macx-g++
   make

   UPDATE: With the creation of the installer, the .dmg is no longer used.
   Instead, GasMan.app is included in the installer's binary. The .dmg 
   generation was left in there in case a more Mac-like installer is
   desired.

Windows Notes
-------------

1) Install the libiconv, libxml2 and libxslt libraries to the xml directory
   under gasman.

Building LIBXML/LIBXSLT
-----------------------

Mac OS X:

   Not necessary, as this library is included with Mac OSX.

Windows:

   Downloading current win32 packages for libiconv, libxml2 and
   libxslt  from http://xmlsoft.org/

Help Documentation
------------------

1) The help documentation is a simple HTML scheme found in the hlp/ folder. 
   Images are stored in hlp/images/. These images are duplicates of the images 
   in the rsc/images/ directory but this is necessary since they will be used 
   by an external program (Assistant). The gasman.adp file is a profile that 
   tells Assistant information on how to organize and represent the help 
   documentation.

InstallBuilder for Qt Notes
---------------------------

Mac OS X:
    Make sure <gasman-dir>/installer/license.xml is registered with 
    InstallBuilder. Also, build with not-static version of Qt (since
    we will be applying the framework approach to distribution).

    From <gasman-dir>
    	 qmake
	 make
	 ./mac/qtdeploy.sh

    Once above is finished, open up installer/gasman.xsl in InstallBuilder 5.0:
    	 Double-check all the paths
	 Build

    Output can be found in <installbuilder-dir>/output/.

Windows:
    Make sure <gasman-dir>/installer/license.xml is registered with 
    InstallBuilder.

    From <gasman-dir>
    	 qmake
	 nmake

    Once above is finished, open up installer/gasman.xsl in InstallBuilder 5.0:
    	 **Double-check all the paths**
	 Build

    Output can be found in <installbuilder-dir>/output/.
